{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"1890227946670184366","abi":{"parameters":[{"name":"user_lat","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"user_lon","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"target_lat","type":{"kind":"integer","sign":"signed","width":64},"visibility":"public"},{"name":"target_lon","type":{"kind":"integer","sign":"signed","width":64},"visibility":"public"},{"name":"radius_meters","type":{"kind":"integer","sign":"signed","width":64},"visibility":"public"}],"return_type":null,"error_types":{"2373659303924614330":{"error_kind":"string","string":"User is outside the specified radius"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4696375007458979588":{"error_kind":"string","string":"bad user_lon"},"4742109169293497338":{"error_kind":"string","string":"bad target_lat"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8002249748234416266":{"error_kind":"string","string":"bad user_lat"},"12604764607938998964":{"error_kind":"string","string":"bad radius"},"13237450239867164652":{"error_kind":"string","string":"bad target_lon"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"pZjBThtBEET/xWcfdnp6Zrr5FYSQASeyZBnk4EgR4t8zPVNlyCESWi5+RUi/tb3edRdvm6f9w+Xn/eH04/nX5ub2bfNwPhyPh5/3x+fH3evh+dT/9W2zxIPL5iZtN54ndKJM1Ik2YRM+kJYFTKCAGVSwgBVsoIHwJfgSfAm+BF+CL8GX4EvwJfgSfAKfwCfwCXwCn8An8Al8Ap/Al+HL8GX4MnwZvgxfhi/Dl+HL8Cl8Cp/Cp/ApfAqfwqfwKXwKX4GvwFfgK/AV+Ap8Bb4CX4GvwFfhq/BV+Cp8Fb4KX4Wvwlfhq/A1+Bp8Db7WfRJUsIDdJ+/v2w0/s/ev5/0+PrKfPsT9o/2yO+9Pr5ub0+V43G5+746X8Z9+vexOg6+7c//tst3sT0+dXfjjcNxHet9+TC//HzVPGHbJ13GRr843bZhvtqyYV+HxVfU6X778/PV6fK2+Zv7j+Ovm3TFfPr1/X58vUjmv3zz+qvnSOF+XNe9/Xfj+15y+d/xV87Vmztua119d+PlN7VvHXzfflK+/1bpmvl7nV73+T8dfNW/C829qa+Ybb179TrRi3he73r/Kqnk+f8+r5sv1/llt1Txfv7c1831T4Qvoy4quMqQPg+h3n8NKw/Vt7KvTssrgSkPfdtYY+pc1DZL/ey7E13yZ3vWfdo+H8787al8G+iHreGzj0cajj8fYGQNpQib6QqGxGE2UiTrRJmzCB2JTDHRL6ZCJbunfO7ElBspEnWgTNuEDsR8GuqWf6tgOA3lCJ8pEnWgTNtEt/TqNrTDQLf1djJ0wkCd0okzUiTZhE7Fs9TM4lsFgAgXMoIIFrGAsb/0MjWUwGL5++x/LYDCBAmZQwQJWMHxxAg30ybEMBhMoYAYVDF8/N7EMDoavn51moE/aAiZQwAwqGL5+lqyCDTTQJ30BEyhg+Bp6UkNRMjQlQ1UydCVDWTK2JWNdMvYlY2EyNiZjZTJ2JmNpMrYmY20y9iZjcTI2J2N1MnYnY3kytidjfTL2J2OBMjYoZ4VydihniXK2KGeNcvYoZ5FyNilnlXJ2KWeZcrYpZ51y9ilnoXI2KmelcnYqZ6lytipnrXL2KmexcjYrR7WSBd1qhsZgDI4Ql9QMiUEYMoMyhJktS1izhD1LWLSETUtYtYRdS1i2hG1LWLeEfUtYuISNS1i5hJ1LWLqErUuutSuxdyUWr2vzGqExGIMjxAU3Q2IQhsygDGGOO3NcdjM0BmNwhLj0ZkgMwpAZlIFmp9lpdpodZlkWhsQgDJlBGcI8vhwqQ2MwBkeIa3CGxCAMmUEZaE40J5oTzYlmoTmuQRlfT8KQGZShMFSGxmAMjhDX4Aw0Z5ozzZnmTHOmOa7BKGYS1+AMjhDX4AyJQRgygzIUhspAs9KsNBeaC82F5kJzobnQXGguNBeaC82V5krzuAZbhMygDIWhMjQGY3CEcQ2OkBhobjQ3mhvNjeZxDVoEY3CEcQ2OkBiEITMoQ2GoDDQbzUaz0+w0xzWYY+v8vTsfdg/HfWxnsb9dTo9c1vqPr39e+Bv+yfHl/Py4f7qc97HYffzdsT/B215sze/mGnfbbzLbfu+4e49V8C8=","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"// main function now takes the target coordinates and radius as inputs.\n// In a real ZKP context:\n// - user_lat, user_lon would be PRIVATE inputs.\n// - target_lat, target_lon, radius_meters would be PUBLIC inputs.\nfn main(\n    user_lat: i64,\n    user_lon: i64,\n    target_lat: pub i64,\n    target_lon: pub i64,\n    radius_meters: pub i64,\n) {\n    // Input bounds (micro-degrees for lat/lon; meters for radius)\n    assert(user_lat >= -90_000_000 & user_lat <= 90_000_000, \"bad user_lat\");\n    assert(user_lon >= -180_000_000 & user_lon <= 180_000_000, \"bad user_lon\");\n    assert(target_lat >= -90_000_000 & target_lat <= 90_000_000, \"bad target_lat\");\n    assert(target_lon >= -180_000_000 & target_lon <= 180_000_000, \"bad target_lon\");\n    assert(radius_meters > 0 & radius_meters <= 500, \"bad radius\");\n\n    let delta_lat = user_lat - target_lat;\n    let delta_lon = user_lon - target_lon;\n\n    let dy = (delta_lat * 11132) / 100000;\n    let dx = (delta_lon * 11132) / 100000;\n\n    let square_distance = dx * dx + dy * dy;\n    let radius_squared = radius_meters * radius_meters;\n\n    assert(square_distance < radius_squared, \"User is outside the specified radius\");\n    println(\"Proof successful: User is within the specified radius.\");\n}\n\n// The sqrt_approx function is no longer needed!\n\n// --- TESTS ---\n\n#[test]\nfn test_eiffel_tower_success() {\n    // Public Inputs: Prove you are within 50m of the Eiffel Tower\n    let eiffel_tower_lat: i64 = 48_858_370; // 48.858370\n    let eiffel_tower_lon: i64 = 2_294_481; // 2.294481\n    let radius: i64 = 50;\n\n    // Private Inputs: User is ~25m away from the center\n    let user_lat: i64 = 48_858_550;\n    let user_lon: i64 = 2_294_650;\n\n    main(\n        user_lat,\n        user_lon,\n        eiffel_tower_lat,\n        eiffel_tower_lon,\n        radius,\n    );\n}\n\n#[test(should_fail_with = \"User is outside the specified radius\")]\nfn test_statue_of_liberty_fail() {\n    // Public Inputs: Prove you are within 100m of the Statue of Liberty\n    let liberty_lat: i64 = 40_689_247; // 40.689247\n    let liberty_lon: i64 = -74_044_502; // -74.044502\n    let radius: i64 = 100;\n\n    // Private Inputs: User is far away in another part of the city\n    let user_lat: i64 = 40_758_000; // Times Square\n    let user_lon: i64 = -73_985_500;\n\n    main(user_lat, user_lon, liberty_lat, liberty_lon, radius);\n}\n","path":"/Users/surfer/Desktop/lol/geofence_prover/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","directive_integer_quotient","directive_invert"]}